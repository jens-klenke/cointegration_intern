% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/computePValue.R
\name{computePValue}
\alias{computePValue}
\alias{computePValue.numeric}
\alias{computePValue.fHTEST}
\alias{computePValue.ur.df}
\alias{computePValue.htest}
\title{P-value}
\usage{
computePValue(object, ...)

\method{computePValue}{numeric}(object, n, type = c("nc", "c", "ct"),
  model = c("gam", "poly"), d = NULL, ...)

\method{computePValue}{fHTEST}(object, model = c("gam", "poly"),
  type = c("nc", "c", "ct"), d = NULL, ...)

\method{computePValue}{ur.df}(object, model = c("gam", "poly"),
  d = NULL, ...)

\method{computePValue}{htest}(object, model = c("gam", "poly"),
  d = NULL, ...)
}
\arguments{
\item{object}{Numeric value or an object (\code{fHTEST}, \code{ur.df} or
\code{htest}) for which p-value needs to approximated.}

\item{...}{Further arguments passed to methods.}

\item{n}{Sample size.}

\item{type}{The type of unit root test. Currently supports: \code{nc} for
test without drift and trend, \code{c} for test with only drift and
\code{ct} for test with both drift and trend.}

\item{model}{The model type to be used for approximation. Available is GAM
and polynomial regression. If \code{gam} is chosen, then \code{d} has no
effect.}

\item{d}{The degree for polynomial. \code{d} must be \eqn{\ge 3} and \eqn{\le
6}. If \code{gam} is chosen, then \code{d} has no effect.}
}
\description{
Function to approximate the p-value for augmented Dickey-Fuller test.
}
\details{
Based on the chosen model (GAM or polynomial), the function returns the
approximated p-value. Default is GAM model.
}
\examples{
library(pvurt)
y <- arima.sim(model = list(order = c(0, 1, 0)), n = 100)

# Test type: with drift and trend
# package: fUnitRoots
library(fUnitRoots)
computePValue(adfTest(y, lags = 3, type = "ct"))
computePValue(unitrootTest(y, lags = 3, type = "ct"))

# package: urca
library(urca)
computePValue(ur.df(y, lags = 3, type = "trend"))
# print summary
summary(computePValue(ur.df(y, lags = 3, type = "trend")))

# package: tseries
library(tseries)
computePValue(adf.test(y, alternative = "stationary", k = 3))

# no packages
tStat <- -2.239
sampleSize <- 100
computePValue(tStat, n = sampleSize, model = "gam", type = "ct")
}
