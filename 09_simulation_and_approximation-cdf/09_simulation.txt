"rCode"
"1" "asy <- function(savecv){"
"2" "# This function calculates/simulates the asymptotic distributions of the"
"3" "# various co-integration tests. It returns a"
"4" "# scalar equal to 1 when done."
"5" "# If SAVECV is equal to 1, it saves the Array of Critical values CV"
"6" "# in critical_values.mat and the distributions under the Null"
"7" "# NULLDISTR in NullDistributions.mat"
"8" "# In addition it provides asymptotic power results, results saved in"
"9" "# workspace.mat"
"10" "#--------------------------------------------------------------------------"
"11" "# The Array NullDistr is organized as follows (neccessary for asytest.m)"
"12" "# NullDistr cols  1: EngleGranger,      CV dim 3: nvars-1"
"13" "#                 2: Johansen,          CV dim 4: deterministics (trend+1)"
"14" "#                 3: ErrCorr,"
"15" "#                 4: Boswijk"
"16" "#--------------------------------------------------------------------------"
"17" "# Critical values in critval.mat, Array CV are organised as follows:"
"18" "#  CV: rows:  1:  Boswijk           CV cols : nvars-1"
"19" "#             2:  ErrCorr           CV dim 3: deterministics (trend+1)"
"20" "#             3:  Johansen          CV dim 4: LvL 1# 5# 10#"
"21" "#             4:  EngleGranger"
"22" "#             5:  FisherBECR;"
"23" "#             6:  FisherBJ"
"24" "#             7:  FisherBE"
"25" "#             8:  FisherEJ"
"26" "#             9:  FisherBJE"
"27" "#             10: FisherBECRJ"
"28" "#             11: FisherBECRJE"
"29" "#             12: InvNormBJE"
"30" "#             13: MinBECR"
"31" "#             14: MinEJ"
"32" "#--------------------------------------------------------------------------"
"33" "# Date: 02.04.2009"
"34" "#--------------------------------------------------------------------------"
"35" "clear"
"36" "clc"
"37" "asy <- 1"
"38" "## Use parallel toolbox"
"39" "# pool=matlabpool('size'); ##ok<*DPOOL>"
"40" "#if pool>0"
"41" "#    matlabpool close"
"42" "#end"
"43" "#matlabpool open"
"44" ""
"45" "#tic;"
"46" "## UR-Test Correction factors (Obtained in different GAUSS Code)"
"47" "# UR-EJ"
"48" "CritValCorrJohansenMultEJ <-  [1.1	1.077	1.065"
"49" "1.08	1.076	1.068"
"50" "1.074	1.063	1.064"
"51" "1.066	1.059	1.056"
"52" "1.061	1.055	1.053"
"53" "1.052	1.051	1.052"
"54" "1.049	1.047	1.054"
"55" "1.045	1.045	1.043"
"56" "1.045	1.042	1.043"
"57" "1.043	1.043	1.038"
"58" "1.04	1.039	1.037 ]"
"59" ""
"60" "CritValCorrEngleGrangerMultEJ <-  [ 1.065	1.05	1.043"
"61" "1.058	1.052	1.044"
"62" "1.055	1.049	1.046"
"63" "1.051	1.045	1.042"
"64" "1.048	1.045	1.041"
"65" "1.046	1.044	1.04"
"66" "1.045	1.042	1.035"
"67" "1.042	1.041	1.039"
"68" "1.04	1.038	1.039"
"69" "1.039	1.035	1.037"
"70" "1.038	1.037	1.035]"
"71" ""
"72" "# UR-BJ"
"73" "CritValCorrJohansenMultBJ <-  [1.101	1.083	1.07"
"74" "1.084	1.082	1.075"
"75" "1.075	1.067	1.068"
"76" "1.071	1.063	1.061"
"77" "1.063	1.058	1.055"
"78" "1.056	1.052	1.054"
"79" "1.05	1.053	1.049"
"80" "1.047	1.048	1.045"
"81" "1.044	1.042	1.046"
"82" "1.044	1.161	1.039"
"83" "1.043	1.039	1.039]"
"84" ""
"85" "CritValCorrBoswijkMultBJ <-  [1.128	1.104	1.093"
"86" "1.131	1.11	1.095"
"87" "1.122	1.104	1.096"
"88" "1.107	1.099	1.09"
"89" "1.103	1.094	1.088"
"90" "1.096	1.091	1.085"
"91" "1.092	1.082	1.082"
"92" "1.089	1.08	1.081"
"93" "1.085	1.081	1.078"
"94" "1.079	1.008	1.075"
"95" "1.072	1.076	1.071]"
"96" ""
"97" "# UR-BERC"
"98" "CritValCorrErrCorrMultBERC <-  [1.049	1.022	1.018"
"99" "1.046	1.028	1.023"
"100" "1.046	1.033	1.023"
"101" "1.042	1.033	1.028"
"102" "1.04	1.032	1.029"
"103" "1.041	1.034	1.028"
"104" "1.039	1.035	1.029"
"105" "1.036	1.032	1.028"
"106" "1.034	1.032	1.028"
"107" "1.034	1.031	1.03"
"108" "1.035	1.032	1.028]"
"109" ""
"110" "CritValCorrBoswijkMultBERC <-  [1.077	1.042	1.032"
"111" "1.075	1.052	1.038"
"112" "1.07	1.053	1.038"
"113" "1.057	1.053	1.043"
"114" "1.058	1.049	1.043"
"115" "1.06	1.051	1.044"
"116" "1.056	1.055	1.045"
"117" "1.05	1.044	1.044"
"118" "1.049	1.047	1.044"
"119" "1.046	1.041	1.043"
"120" "1.047	1.045	1.041]"
"121" ""
"122" ""
"123" "## Main part"
"124" "format short){"
"125" "# savecv=0; # Save Critical values"
"126" "R2 <- (0:.05:.95)'"
"127" "#R2=0;"
"128" "T <- 1000"
"129" "c <- -(0:1:30)'"
"130" "#c=-[0, 1, 3, 5, (6:2:30)]';"
"131" "#c=0"
"132" "kmax <- 11#Number of Variables"
"133" "rep <- 25000#Number of Repetitions"
"134" "cases <- 3# Number of cases 1=(i): No Constant, No Trend, 2=(i)&(ii): also Constant, 3=(i)&(ii)&(iii): Also Trend"
"135" ""
"136" "lambda <- (1/T:1/T:1)"
"137" "# Initialize Power Curves:"
"138" "# (1) Underlying Tests"
"139" "BoswijkLocalAsyPower <- zeros(kmax,cases,size(c,1),size(R2,1))"
"140" "JohansenLocalAsyPower <- zeros(kmax,cases,size(c,1),size(R2,1))"
"141" "EngleGrangerLocalAsyPower <- zeros(kmax,cases,size(c,1),size(R2,1))"
"142" "ErrCorrLocalAsyPower <- zeros(kmax,cases,size(c,1),size(R2,1))"
"143" ""
"144" "#(2) UR-Tests"
"145" "UnionRejectionLocalAsyPowerBJAsymmMult <- zeros(kmax,cases,size(c,1),size(R2,1))"
"146" "UnionRejectionLocalAsyPowerBERCAsymmMult <- zeros(kmax,cases,size(c,1),size(R2,1))"
"147" "UnionRejectionLocalAsyPowerEJAsymmMult <- zeros(kmax,cases,size(c,1),size(R2,1))"
"148" ""
"149" "#(3) Fisher type Tests"
"150" "FisherLocalAsyPowerEJ <- zeros(kmax,cases,size(c,1),size(R2,1))"
"151" "FisherLocalAsyPowerBJ <- zeros(kmax,cases,size(c,1),size(R2,1))"
"152" "FisherLocalAsyPowerBE <- zeros(kmax,cases,size(c,1),size(R2,1))"
"153" "FisherLocalAsyPowerBECR <- zeros(kmax,cases,size(c,1),size(R2,1))"
"154" "FisherLocalAsyPowerBJE <- zeros(kmax,cases,size(c,1),size(R2,1))"
"155" "FisherLocalAsyPowerEJw <- zeros(kmax,cases,size(c,1),size(R2,1))"
"156" "FisherLocalAsyPowerBECRJE <- zeros(kmax,cases,size(c,1),size(R2,1))"
"157" "FisherLocalAsyPowerBECRJ <- zeros(kmax,cases,size(c,1),size(R2,1))"
"158" ""
"159" "#(4) Inverse Normal type Test"
"160" "InvNormLocalAsyPowerBJE <- zeros(kmax,cases,size(c,1),size(R2,1))"
"161" ""
"162" "#(5) Minimum tests"
"163" "MinLocalAsyPowerBERC <- zeros(kmax,cases,size(c,1),size(R2,1))"
"164" "MinLocalAsyPowerEJ <- zeros(kmax,cases,size(c,1),size(R2,1))"
"165" ""
"166" "for (k in 1:kmax){# Number of Regressor Loop"
"167" "    for (dets in 1:cases){# Number of cases Loop"
"168" "        # initialization of Null Distribution of Test statistic"
"169" "        NullStatBoswijk <- zeros(rep,1)"
"170" "        NullStatJohansen <- zeros(rep,1)"
"171" "        NullStatEngleGranger <- zeros(rep,1)"
"172" "        NullStatErrCorr <- zeros(rep,1)"
"173" "        NullDistrBoswijk <- 0"
"174" "        NullDistrJohansen <- 0"
"175" "        NullDistrEngleGranger <- 0"
"176" "        NullDistrErrCorr <- 0"
"177" ""
"178" ""
"179" "        for (rr in 1:rows(R2)){# Loop over Pesavento R2"
"180" "            for (cc in 1:rows(c)){#Loop over Local to unity parameter"
"181" "                # Initialize Test Statistics"
"182" "                BoswijkStat <- zeros(rep,1)"
"183" "                JohansenStat <- zeros(rep,1)"
"184" "                EngleGrangerStat <- zeros(rep,1)"
"185" "                ErrCorrStat <- zeros(rep,1)"
"186" "                BoswijkPValue <- zeros(rep,1)"
"187" "                JohansenPValue <- zeros(rep,1)"
"188" "                EngleGrangerPValue <- zeros(rep,1)"
"189" "                ErrCorrPValue <- zeros(rep,1)"
"190" ""
"191" "                # Set R2 and c corresponding to loop"
"192" "                R2run <- R2(rr)"
"193" "                c_run <- c(cc)"
"194" ""
"195" "                # Loop over repetitions"
"196" "                parfor (j in 1:rep){"
"197" "                    u <- randn(T,k+1)# Draw random Shocks"
"198" "                    W1 <- cumsum(u(:,1:k))/sqrt(T)# Simulate Wiener Process"
"199" "                    u12 <- sqrt(R2run./(1-R2run)).*u(:,1:k)*ones(k,1)/sqrt(k) + u(:,k+1)"
"200" "                    J12 <- Bc(u12,c_run)#Ohrnsetin Uhlenbeck Process"
"201" "                    # Corrections according to case"
"202" ""
"203" "                    if (dets==1){# No Constant, no trend"
"204" "                        W1d <- W1"
"205" "                        J12dc <- J12"
"206" "                    } else if (dets==2){#Constant, no trend"
"207" "                        W1d <- W1 - (ones(T,1)*mean(W1))"
"208" "                        J12dc <- J12 - (ones(T,1)*mean(J12))"
"209" "                    } else if (dets==3){# Constant and Trend"
"210" "                        W1d <- W1-(4-6*repmat(lambda',1,k)).*(ones(T,1)*mean(W1))-(12*repmat(lambda',1,k)-6).*(ones(T,1)*mean(repmat(lambda',1,k).*W1))"
"211" "                        J12dc <- J12-(4-6*lambda').*(ones(T,1)*mean(J12))-(12*lambda'-6).*(ones(T,1)*mean(lambda'.*J12))"
"212" "                    }"
"213" "                    Wdc <- [W1d J12dc]"
"214" ""
"215" ""
"216" ""
"217" "                    # -----------------------------Common Terms------------"
"218" "                    WdcDW2 <- mean(Wdc(1:T-1,:).*(repmat(u(2:T,k+1),1,k+1)))"
"219" "                    WdcWdci <- inv(1/T.^2*Wdc'*Wdc)"
"220" "                    W1dW1di <- inv(1/T*W1d(1:T-1,:)'*W1d(1:T-1,:))"
"221" "                    W1dJ12dc <- mean(W1d(1:T-1,:).*repmat(J12dc(1:T-1,:),1,k))"
"222" "                    J12dc_sq <- mean(J12dc(1:T-1).^2)"
"223" "                    J12DW2 <- mean(J12dc(1:T-1).*u(2:T,k+1))"
"224" "                    # -------------------------------- Boswijk------------------------"
"225" "                    BoswijkStat(j) <- c_run.^2 .*J12dc_sq + 2*c_run.*sqrt(T)*J12DW2 + WdcDW2*WdcWdci*WdcDW2'"
"226" "                    if (cc == 1 && rr == 1){"
"227" "                        NullStatBoswijk(j) <- BoswijkStat(j)"
"228" "                    } else {"
"229" "                        BoswijkPValue(j) <- 1-minindc(abs(BoswijkStat(j)-NullDistrBoswijk))/rep+10.^(-1000)"
"230" "                    }"
"231" ""
"232" "                    # -------------------------------- Johansen -------------------------------- */"
"233" ""
"234" "                    Gc <- mean(Wdc.*repmat(J12dc,1,size(Wdc,2)))'*([zeros(1,k) c_run])/sqrt(T)# the square root is to make it fit with other extra power, see notes */"
"235" "                    Wdc_dW_pr <- 1/T*u(2:T,:)'*Wdc(1:T-1,:)"
"236" "                    dW_Wdc_pr <- 1/T*Wdc(1:T-1,:)'*u(2:T,:)"
"237" ""
"238" "                    JohansenStat(j) <- max(eig(Wdc_dW_pr*WdcWdci*dW_Wdc_pr+Gc'*WdcWdci*dW_Wdc_pr+dW_Wdc_pr'*WdcWdci*Gc+Gc'*WdcWdci*Gc))"
"239" "                    if (cc == 1 && rr == 1){"
"240" "                        NullStatJohansen(j) <- JohansenStat(j)"
"241" "                    } else {"
"242" "                        JohansenPValue(j) <- 1-minindc(abs(JohansenStat(j)-NullDistrJohansen))/rep+10.^(-1000)"
"243" "                    }"
"244" ""
"245" "                    # -------------------------------- Engle-Granger -------------------------------- */"
"246" ""
"247" "                    etadc <- [(-W1dW1di*mean(W1d(1:T-1,:).*repmat(J12dc(1:T-1,:),1,k))'); 1]"
"248" "                    Adc <- 1/T*Wdc(1:T-1,:)'*Wdc(1:T-1,:)"
"249" "                    Dmat <- [eye(k) (sqrt(R2run./(1-R2run)).*ones(k,1)/sqrt(k));..."
"250" "                        (sqrt(R2run./(1-R2run)).*ones(1,k)/sqrt(k)) (1+R2run./(1-R2run))]"
"251" "                    utilde <- [u(:,1:k) u12]"
"252" "                    Wdc_dWtilde <- 1/sqrt(T)*Wdc(1:T-1,:)'*utilde(2:T,:)"
"253" ""
"254" "                    EngleGrangerStat(j) <- c_run.*sqrt(etadc'*Adc*etadc)./sqrt(etadc'*Dmat*etadc) +..."
"255" "                        (etadc'*Wdc_dWtilde*etadc)/(sqrt(etadc'*Dmat*etadc)*sqrt(etadc'*Adc*etadc))"
"256" ""
"257" "                    if (cc == 1 && rr == 1){"
"258" "                        NullStatEngleGranger(j) <- EngleGrangerStat(j)"
"259" "                    } else {"
"260" "                        EngleGrangerPValue(j) <- minindc(abs(EngleGrangerStat(j)-NullDistrEngleGranger))/rep"
"261" "                    }"
"262" ""
"263" "                    # -------------------------------- ECR (Banerjee) -------------------------------- */"
"264" "                    zaehler <-  sqrt(T)*(J12DW2'-W1dJ12dc*W1dW1di*mean(W1d(1:T-1,:).*repmat(u(2:T,k+1),1,k))')"
"265" "                    nenner <- (sqrt(J12dc_sq'-W1dJ12dc*W1dW1di*W1dJ12dc'))"
"266" "                    ErrCorrStat(j) <- c_run.*sqrt(J12dc_sq'-W1dJ12dc*W1dW1di*W1dJ12dc') + zaehler/nenner"
"267" ""
"268" ""
"269" "                    if (cc == 1){# here we condition on each R2 because the r2=0 c.v. turned out not to be good for R2 very large >0.75*/"
"270" "                        NullStatErrCorr(j) <- real(ErrCorrStat(j))# a 0 plus imaginary occurred once... */"
"271" "                    } else {"
"272" "                        ErrCorrPValue(j) <- minindc(abs(ErrCorrStat(j)-NullDistrErrCorr))/rep"
"273" "                    }"
"274" ""
"275" "                }#rep loop end"
"276" ""
"277" "                ## Write Null Distributions and Critical Values for underlying tests"
"278" "                NullDistrBoswijk <- sort(NullStatBoswijk)"
"279" "                CritvalBoswijk <- NullDistrBoswijk(rep*.95)"
"280" "                CritvalBoswijk1 <- NullDistrBoswijk(rep*.99)"
"281" "                CritvalBoswijk2 <- NullDistrBoswijk(rep*.95)"
"282" "                CritvalBoswijk3 <- NullDistrBoswijk(rep*.90)"
"283" "                if (cc == 1 && rr == 1){"
"284" "                    BoswijkPValue <- 1-rankindx(NullStatBoswijk,1)/rep+10.^(-1000)"
"285" "                }"
"286" "                BoswijkLocalAsyPower(k,dets,cc,rr) <- mean((BoswijkStat > CritvalBoswijk))"
"287" ""
"288" "                NullDistrJohansen <- sort(NullStatJohansen)"
"289" "                CritvalJohansen <- NullDistrJohansen(rep*.95)"
"290" "                CritvalJohansen1 <- NullDistrJohansen(rep*.99)"
"291" "                CritvalJohansen2 <- NullDistrJohansen(rep*.95)"
"292" "                CritvalJohansen3 <- NullDistrJohansen(rep*.90)"
"293" "                if (cc == 1 && rr == 1){"
"294" "                    JohansenPValue <- 1-rankindx(NullStatJohansen,1)/rep+10.^(-1000)"
"295" "                }"
"296" "                JohansenLocalAsyPower(k,dets,cc,rr) <- mean((JohansenStat > CritvalJohansen))"
"297" ""
"298" "                NullDistrEngleGranger <- sort(NullStatEngleGranger)"
"299" "                CritvalEngleGranger <- NullDistrEngleGranger(rep*0.05)"
"300" "                CritvalEngleGranger1 <- NullDistrEngleGranger(rep*0.01)"
"301" "                CritvalEngleGranger2 <- NullDistrEngleGranger(rep*0.05)"
"302" "                CritvalEngleGranger3 <- NullDistrEngleGranger(rep*0.10)"
"303" "                if (cc == 1 && rr == 1){"
"304" "                    EngleGrangerPValue <- rankindx(NullStatEngleGranger,1)/rep+10.^(-1000)"
"305" "                }"
"306" "                EngleGrangerLocalAsyPower(k,dets,cc,rr)=mean((EngleGrangerStat <= CritvalEngleGranger))"
"307" ""
"308" "                NullDistrErrCorr <- sort(NullStatErrCorr)"
"309" "                CritvalErrCorr <- NullDistrErrCorr(rep*0.05)"
"310" ""
"311" "                if (cc == 1){"
"312" "                    ErrCorrPValue <- rankindx(NullStatErrCorr,1)/rep+10.^(-1000)"
"313" "                    if (rr==1){"
"314" "                        CritValErrCorr1 <- NullDistrErrCorr(rep*0.01)"
"315" "                        CritValErrCorr2 <- NullDistrErrCorr(rep*0.05)"
"316" "                        CritValErrCorr3 <- NullDistrErrCorr(rep*0.10)"
"317" "                    }"
"318" "                }"
"319" "                ErrCorrLocalAsyPower(k,dets,cc,rr)=mean((ErrCorrStat <= CritvalErrCorr))"
"320" ""
"321" "                # -------------------------------- Union of Rejections -------------------------------- */"
"322" "                UnionRejectionStatEJAsymmMult <- (EngleGrangerStat.*(EngleGrangerStat < CritvalEngleGranger.*CritValCorrEngleGrangerMultEJ(k,dets)) < CritvalEngleGranger.*CritValCorrEngleGrangerMultEJ(k,dets)) + (JohansenStat.*(EngleGrangerStat > CritvalEngleGranger.*CritValCorrEngleGrangerMultEJ(k,dets)) > CritvalJohansen.*CritValCorrJohansenMultEJ(k,dets))"
"323" "                UnionRejectionLocalAsyPowerEJAsymmMult(k,dets,cc,rr) <- mean(UnionRejectionStatEJAsymmMult)"
"324" "                UnionRejectionStatBJAsymmMult <- (BoswijkStat.*(BoswijkStat > CritvalBoswijk.*CritValCorrBoswijkMultBJ(k,dets)) > CritvalBoswijk.*CritValCorrBoswijkMultBJ(k,dets)) + (JohansenStat.*(BoswijkStat < CritvalBoswijk.*CritValCorrBoswijkMultBJ(k,dets)) > CritvalJohansen.*CritValCorrJohansenMultBJ(k,dets))"
"325" "                UnionRejectionLocalAsyPowerBJAsymmMult(k,dets,cc,rr) <- mean(UnionRejectionStatBJAsymmMult)"
"326" "                UnionRejectionStatBERCAsymmMult <- (BoswijkStat.*(BoswijkStat > CritvalBoswijk.*CritValCorrBoswijkMultBERC(k,dets)) > CritvalBoswijk.*CritValCorrBoswijkMultBERC(k,dets)) + (ErrCorrStat.*(BoswijkStat < CritvalBoswijk.*CritValCorrBoswijkMultBERC(k,dets)) < CritvalErrCorr.*CritValCorrErrCorrMultBERC(k,dets))"
"327" "                UnionRejectionLocalAsyPowerBERCAsymmMult(k,dets,cc,rr) <- mean(UnionRejectionStatBERCAsymmMult)"
"328" ""
"329" ""
"330" "## -------------------------------- Fisher Type Tests --------------------------------"
"331" "                # Define Statistics"
"332" "                FisherStatEJ <- -2*(log(EngleGrangerPValue)+log(JohansenPValue))"
"333" "                FisherStatBJ <- -2*(log(BoswijkPValue)+log(JohansenPValue))"
"334" "                FisherStatBE <- -2*(log(BoswijkPValue)+log(EngleGrangerPValue))"
"335" "                FisherStatBJE <- -2*(log(EngleGrangerPValue)+log(JohansenPValue)+log(BoswijkPValue))"
"336" "                FisherStatBECR <- -2*(log(ErrCorrPValue)+log(BoswijkPValue))"
"337" "                FisherStatBECRJ <- -2*(log(ErrCorrPValue)+log(BoswijkPValue)+log(JohansenPValue))"
"338" "                FisherStatBECRJE <- -2*(log(ErrCorrPValue)+log(BoswijkPValue)+log(EngleGrangerPValue)+log(JohansenPValue))"
"339" "                FisherStatEJw <- -4*((1/(1+exp(5*(R2run-.25))))*log(EngleGrangerPValue)+(1-1/(1+exp(5*(R2run-.25))))*log(JohansenPValue))"
"340" ""
"341" "                if (cc == 1 && rr == 1){# Write Critical Values"
"342" "                    NullDistrFisherEJ <- sort(FisherStatEJ)"
"343" "                    CritvalFisherEJ <- NullDistrFisherEJ(rep*.95)"
"344" "                    CritvalFisherEJ1 <- NullDistrFisherEJ(rep*.99)"
"345" "                    CritvalFisherEJ2 <- NullDistrFisherEJ(rep*.95)"
"346" "                    CritvalFisherEJ3 <- NullDistrFisherEJ(rep*.90)"
"347" ""
"348" "                    NullDistrFisherBJ <- sort(FisherStatBJ)"
"349" "                    CritvalFisherBJ <- NullDistrFisherBJ(rep*.95)"
"350" "                    CritvalFisherBJ1 <- NullDistrFisherBJ(rep*.99)"
"351" "                    CritvalFisherBJ2 <- NullDistrFisherBJ(rep*.95)"
"352" "                    CritvalFisherBJ3 <- NullDistrFisherBJ(rep*.90)"
"353" ""
"354" "                    NullDistrFisherBE <- sort(FisherStatBE)"
"355" "                    CritvalFisherBE <- NullDistrFisherBE(rep*.95)"
"356" "                    CritvalFisherBE1 <- NullDistrFisherBE(rep*.99)"
"357" "                    CritvalFisherBE2 <- NullDistrFisherBE(rep*.95)"
"358" "                    CritvalFisherBE3 <- NullDistrFisherBE(rep*.90)"
"359" ""
"360" "                    NullDistrFisherBJE <- sort(FisherStatBJE)"
"361" "                    CritvalFisherBJE <- NullDistrFisherBJE(rep*.95)"
"362" "                    CritvalFisherBJE1 <- NullDistrFisherBJE(rep*.99)"
"363" "                    CritvalFisherBJE2 <- NullDistrFisherBJE(rep*.95)"
"364" "                    CritvalFisherBJE3 <- NullDistrFisherBJE(rep*.90)"
"365" ""
"366" "                    NullDistrFisherBECR <- sort(FisherStatBECR)"
"367" "                    CritvalFisherBECR <- NullDistrFisherBECR(rep*.95)"
"368" "                    CritvalFisherBECR1 <- NullDistrFisherBECR(rep*.99)"
"369" "                    CritvalFisherBECR2 <- NullDistrFisherBECR(rep*.95)"
"370" "                    CritvalFisherBECR3 <- NullDistrFisherBECR(rep*.90)"
"371" ""
"372" "                    NullDistrFisherBECRJE <- sort(FisherStatBECRJE)"
"373" "                    CritvalFisherBECRJE <- NullDistrFisherBECRJE(rep*.95)"
"374" "                    CritvalFisherBECRJE1 <- NullDistrFisherBECRJE(rep*.99)"
"375" "                    CritvalFisherBECRJE2 <- NullDistrFisherBECRJE(rep*.95)"
"376" "                    CritvalFisherBECRJE3 <- NullDistrFisherBECRJE(rep*.90)"
"377" ""
"378" "                    NullDistrFisherBECRJ <- sort(FisherStatBECRJ)"
"379" "                    CritvalFisherBECRJ <- NullDistrFisherBECRJ(rep*.95)"
"380" "                    CritvalFisherBECRJ1 <- NullDistrFisherBECRJ(rep*.99)"
"381" "                    CritvalFisherBECRJ2 <- NullDistrFisherBECRJ(rep*.95)"
"382" "                    CritvalFisherBECRJ3 <- NullDistrFisherBECRJ(rep*.90)"
"383" ""
"384" "                    NullDistrFisherEJw <- sort(FisherStatEJw)"
"385" "                    CritvalFisherEJw <- NullDistrFisherEJw(rep*.95)"
"386" "                }"
"387" ""
"388" "                # Evaluate Local Power"
"389" "                FisherLocalAsyPowerEJ(k,dets,cc,rr) <- mean((FisherStatEJ > CritvalFisherEJ))"
"390" "                FisherLocalAsyPowerBJ(k,dets,cc,rr) <- mean((FisherStatBJ > CritvalFisherBJ))"
"391" "                FisherLocalAsyPowerBE(k,dets,cc,rr) <- mean((FisherStatBE > CritvalFisherBE))"
"392" "                FisherLocalAsyPowerBJE(k,dets,cc,rr) <- mean((FisherStatBJE > CritvalFisherBJE))"
"393" "                FisherLocalAsyPowerBECR(k,dets,cc,rr) <- mean((FisherStatBECR > CritvalFisherBECR))"
"394" "                FisherLocalAsyPowerBECRJE(k,dets,cc,rr) <- mean((FisherStatBECRJE > CritvalFisherBECRJE))"
"395" "                FisherLocalAsyPowerBECRJ(k,dets,cc,rr) <- mean((FisherStatBECRJ > CritvalFisherBECRJ))"
"396" "                FisherLocalAsyPowerEJw(k,dets,cc,rr) <- mean((FisherStatEJw > CritvalFisherEJw))"
"397" ""
"398" "                ## -------------------------------- Inverse Normal -------------------------------- */"
"399" "                InvNormStatBJE <- 1/sqrt(3)*(norminv(EngleGrangerPValue)+norminv(JohansenPValue)+norminv(BoswijkPValue))"
"400" "                if (cc == 1 && rr == 1){"
"401" "                    NullDistrInvNormBJE <- sort(InvNormStatBJE)"
"402" "                    CritvalInvNormBJE <- NullDistrInvNormBJE(rep*.05)"
"403" "                    CritvalInvNormBJE1 <- NullDistrInvNormBJE(rep*.01)"
"404" "                    CritvalInvNormBJE2 <- NullDistrInvNormBJE(rep*.05)"
"405" "                    CritvalInvNormBJE3 <- NullDistrInvNormBJE(rep*.10)"
"406" "                }"
"407" "                InvNormLocalAsyPowerBJE(k,dets,cc,rr)=mean((InvNormStatBJE <= CritvalInvNormBJE))"
"408" "                ## -------------------------------- Min Pval -------------------------------- *"
"409" "                # Define Test Statistics"
"410" "                MinStatBECR <- min(ErrCorrPValue,BoswijkPValue)"
"411" "                MinStatEJ <- min(EngleGrangerPValue,JohansenPValue)"
"412" ""
"413" "                if (cc == 1 && rr == 1){# Calculate Critical Values"
"414" "                    NullDistrMinBECR <- sort(MinStatBECR)"
"415" "                    CritvalMinBECR <- NullDistrMinBECR(rep*.05)"
"416" "                    CritvalMinBECR1 <- NullDistrMinBECR(rep*.01)"
"417" "                    CritvalMinBECR2 <- NullDistrMinBECR(rep*.05)"
"418" "                    CritvalMinBECR3 <- NullDistrMinBECR(rep*.10)"
"419" ""
"420" "                    NullDistrMinEJ <- sort(MinStatEJ)"
"421" "                    CritvalMinEJ <- NullDistrMinEJ(rep*.05)"
"422" "                    CritvalMinEJ1 <- NullDistrMinEJ(rep*.01)"
"423" "                    CritvalMinEJ2 <- NullDistrMinEJ(rep*.05)"
"424" "                    CritvalMinEJ3 <- NullDistrMinEJ(rep*.10)"
"425" "                }"
"426" ""
"427" "                # Local Power"
"428" "                MinLocalAsyPowerBERC(k,dets,cc,rr) <- mean((MinStatBECR < CritvalMinBECR))"
"429" "                MinLocalAsyPowerEJ(k,dets,cc,rr) <- mean((MinStatEJ < CritvalMinEJ))"
"430" ""
"431" ""
"432" "            }# R2"
"433" "        }# c"
"434" ""
"435" "        # -------------------------------- results -------------------------------- */"
"436" "        disp (['k && case ' num2str(k) num2str(dets)])"
"437" "        disp (['c.v. Boswijk ' num2str(CritvalBoswijk)])"
"438" "        disp (['c.v. Johansen ' num2str(CritvalJohansen)])"
"439" "        disp (['c.v. EngleGranger ' num2str(CritvalEngleGranger)])"
"440" "        disp (['c.v. ErrCorr ' num2str(CritValErrCorr1)])"
"441" "        disp ' '"
"442" "        disp (['c.v. FisherEJ ' num2str(CritvalFisherEJ)])"
"443" "        disp (['c.v. FisherBJ ' num2str(CritvalFisherBJ)])"
"444" "        disp (['c.v. FisherBE ' num2str(CritvalFisherBE)])"
"445" "        disp (['c.v. FisherBJE ' num2str(CritvalFisherBJE)])"
"446" "        disp (['c.v. FisherBECR ' num2str(CritvalFisherBECR)])"
"447" "        disp (['c.v. FisherEJ wght ' num2str(CritvalFisherEJw)])"
"448" "        disp (['c.v. InvNormBJE ' num2str(CritvalInvNormBJE)])"
"449" "        disp ' '"
"450" "        disp (['the chi(2*2) 95% quantile is' num2str(chi2inv(.95,4))])"
"451" "        disp (['the chi(2*3) 95% quantile is' num2str(chi2inv(.95,6))])"
"452" "        disp ' '"
"453" "        CV(:,k,dets,1) <- [CritvalBoswijk1; CritValErrCorr1; CritvalJohansen1; CritvalEngleGranger1; CritvalFisherBECR1; ..."
"454" "            CritvalFisherBJ1; CritvalFisherBE1; CritvalFisherEJ1; CritvalFisherBJE1; CritvalFisherBECRJ1; CritvalFisherBECRJE1; CritvalInvNormBJE1; CritvalMinBECR1; CritvalMinEJ1]"
"455" "        CV(:,k,dets,2) <- [CritvalBoswijk2; CritValErrCorr2; CritvalJohansen2; CritvalEngleGranger2; CritvalFisherBECR2; ..."
"456" "            CritvalFisherBJ2; CritvalFisherBE2; CritvalFisherEJ2; CritvalFisherBJE2; CritvalFisherBECRJ2; CritvalFisherBECRJE2; CritvalInvNormBJE2; CritvalMinBECR2; CritvalMinEJ2]"
"457" "        CV(:,k,dets,3) <- [CritvalBoswijk3; CritValErrCorr3; CritvalJohansen3; CritvalEngleGranger3; CritvalFisherBECR3; ..."
"458" "            CritvalFisherBJ3; CritvalFisherBE3; CritvalFisherEJ3; CritvalFisherBJE3; CritvalFisherBECRJ3; CritvalFisherBECRJE3; CritvalInvNormBJE3; CritvalMinBECR3; CritvalMinEJ3]"
"459" "        NullDistr(:,:,k,dets) <- [NullDistrEngleGranger, NullDistrJohansen, NullDistrErrCorr, NullDistrBoswijk]"
"460" ""
"461" "    }# dets */"
"462" "}# k */"
"463" "save workspace"
"464" "if (savecv==1){"
"465" "    save critical_values CV"
"466" "    save NullDistributions NullDistr"
"467" "}"
"468" "toc"
"469" ""
"470" "## Subfunctions"
"471" "# Ohrnstein Uhlenbeck Process"
"472" "Bc <- function(u,d){"
"473" "T <- rows(u)"
"474" "rho <- (1+d/T)"
"475" "v <- zeros(size(u))"
"476" "v(:,1) <- u(:,1)"
"477" "for (t in 2:T){"
"478" "    v(t,:) <- rho*v(t-1,:)+u(t,:)"
"479" "}"
"480" "B <- v/sqrt(T)"
"481" ""
"482" "# introduced for Gauss compatibility"
"483" "rows <- function(c){"
"484" "row <- size(c,1)"
"485" ""
"486" "minindc <- function(A){"
"487" "[aux,minindc] <- min(A)"
"488" ""
"489" "rankindx <- function(a,b){"
"490" "[T,N] <- size(a)"
"491" "aux <- [a, (1:T)']"
"492" "[aux] <- sortrows(aux,b)"
"493" "aux <- [aux, (1:T)']"
"494" "[aux] <- sortrows(aux,N+1)"
"495" "rankindx <- aux(:,length(aux))"
